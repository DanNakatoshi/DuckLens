name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      run: |
        (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
        echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh
    
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
      shell: pwsh
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
    
    - name: Install dependencies
      run: poetry install --no-root
      shell: pwsh
    
    - name: Run type checking with mypy
      run: poetry run mypy src/
      shell: pwsh
      continue-on-error: true
    
    - name: Run linting with ruff
      run: poetry run ruff check src/
      shell: pwsh
    
    - name: Run code formatting check with black
      run: poetry run black --check src/
      shell: pwsh
    
    - name: Run tests with pytest
      run: poetry run pytest tests/ --cov=src --cov-report=xml --cov-report=term
      shell: pwsh
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
      if: matrix.python-version == '3.13'
